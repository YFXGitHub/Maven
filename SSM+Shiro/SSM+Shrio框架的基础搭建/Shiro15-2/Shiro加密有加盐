  public static void main(String[] args) {
	        String password = "123";
	      /*
	         //没有加盐的  加密
	        String encodedPassword = new Md5Hash(password).toString();
	        System.out.println(encodedPassword);
	       */
	        
	        //随机加盐
	        String salt = new SecureRandomNumberGenerator().nextBytes().toString();
	        int times = 2;
	        String algorithmName = "md5";
	         
	        String encodedPassword = new SimpleHash(algorithmName,password,salt,times).toString();
	        System.out.println(salt); //1iD3PWgaT6FJOIzPjxx6Yw==      一定要知道加密有加盐的密码中的 加盐是？
	         
	        System.out.printf("原始密码是 %s , 盐是： %s, 运算次数是： %d, 运算出来的密文是：%s ",password,salt,times,encodedPassword);
	        
	    }
	    
	package com.yfx.realms;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authc.SimpleAuthenticationInfo;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.crypto.hash.SimpleHash;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;
import org.apache.shiro.util.ByteSource;

//验证 、授权 类
public class LoginRealm extends AuthorizingRealm {

	@Override
	protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {
		 String name =(String) principals.getPrimaryPrincipal();
		System.out.println("为"+name+"用户进行授权。。。");
		
		return null;
	}

	@Override
	protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authentToken) throws AuthenticationException {
		System.out.println("验证。。。");
		UsernamePasswordToken token = (UsernamePasswordToken)authentToken;
		String password = new String(token.getPassword());
		//解析加密有加盐的 密码
//		String passwordEncoded = new SimpleHash("md5",password,"ER9QMxFZGxW7tpnZ0iC7rA==",2).toString();
//		System.out.println("加盐加密后的密码："+passwordEncoded);
		
		 //解析加密有加盐的 密码
		String passwordEncoded = new SimpleHash("md5",password,"ER9QMxFZGxW7tpnZ0iC7rA==",2).toString();
		System.out.println("加盐加密后的密码："+passwordEncoded);
		
		//数据库中的密码		b8c89eab172c885ef9d501652ec81d22
		String pwdDatabase = "b8c89eab172c885ef9d501652ec81d22";
		if(token.getUsername().equals("admin") && passwordEncoded.equals(pwdDatabase)) {
			return new SimpleAuthenticationInfo(token.getUsername(), password, getName());	
		}else {
			 throw new AuthenticationException();
		}
	}
	
	/*
	 //解析加密有加盐的 密码
		String passwordEncoded = new SimpleHash("md5",password,"ER9QMxFZGxW7tpnZ0iC7rA==",2).toString();
		System.out.println("加盐加密后的密码："+passwordEncoded);
		
		//数据库中的密码		b8c89eab172c885ef9d501652ec81d22
		String pwdDatabase = "b8c89eab172c885ef9d501652ec81d22";
		if(token.getUsername().equals("admin") && passwordEncoded.equals(pwdDatabase)) {
			return new SimpleAuthenticationInfo(token.getUsername(), password, getName());	
		}else {
			 throw new AuthenticationException();
		}
		
		
		String salt = "ER9QMxFZGxW7tpnZ0iC7rA==";
		String pwdDatabase = "b8c89eab172c885ef9d501652ec81d22";
		SimpleAuthenticationInfo info = new SimpleAuthenticationInfo(token, pwdDatabase, ByteSource.Util.bytes(salt), getName());
		return info;
	 * */

}



	--------------------------------官网的实现方式！	
package com.how2java;
import java.util.Set;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authc.SimpleAuthenticationInfo;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.authz.SimpleAuthorizationInfo;
import org.apache.shiro.crypto.hash.SimpleHash;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;
import org.apache.shiro.util.ByteSource;

public class DatabaseRealm extends AuthorizingRealm {

	@Override
	protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {
		
		//能进入到这里，表示账号已经通过验证了
		String userName =(String) principalCollection.getPrimaryPrincipal();
		//通过DAO获取角色和权限
		Set<String> permissions = new DAO().listPermissions(userName);
		Set<String> roles = new DAO().listRoles(userName);
		
		//授权对象
		SimpleAuthorizationInfo s = new SimpleAuthorizationInfo();
		//把通过DAO获取到的角色和权限放进去
		s.setStringPermissions(permissions);
		s.setRoles(roles);
		return s;
	}

	@Override
	protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {
		//获取账号密码
		UsernamePasswordToken t = (UsernamePasswordToken) token;
		String userName= token.getPrincipal().toString();
		String password =new String(t.getPassword());
		//获取数据库中的密码
		
		User user = new DAO().getUser(userName);
		String passwordInDB = user.getPassword();
		String salt = user.getSalt();
		String passwordEncoded = new SimpleHash("md5",password,salt,2).toString();
		
		if(null==user || !passwordEncoded.equals(passwordInDB))
			throw new AuthenticationException();
		
		//认证信息里存放账号密码, getName() 是当前Realm的继承方法,通常返回当前类名 :databaseRealm
		SimpleAuthenticationInfo a = new SimpleAuthenticationInfo(userName,password,getName());
		return a;
	}

}
		------------------------------
		    
