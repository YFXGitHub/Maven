【spring data jpa】jpa实现update操作 字段有值就更新,没值就用原来的
    /**
         *复杂JPA操作  使用@Query()自定义sql语句  根据业务id UId去更新整个实体
         * 删除和更新操作，需要@Modifying和@Transactional注解的支持
         *
         * 更新操作中 如果某个字段为null则不更新，否则更新【注意符号和空格位置】
         *
         * @param huaYangArea   传入实体，分别取实体字段进行set
         * @return  更新操作返回sql作用条数
         */
        @Modifying
        @Transactional
        @Query("update HuaYangArea hy set " +
                "hy.areaName = CASE WHEN :#{#huaYangArea.areaName} IS NULL THEN hy.areaName ELSE :#{#huaYangArea.areaName} END ," +
                "hy.areaPerson = CASE WHEN :#{#huaYangArea.areaPerson} IS NULL THEN hy.areaPerson ELSE :#{#huaYangArea.areaPerson} END ," +
                "hy.updateDate = CASE WHEN :#{#huaYangArea.updateDate} IS NULL THEN hy.updateDate ELSE :#{#huaYangArea.updateDate} END ," +
                "hy.updateId =  CASE WHEN :#{#huaYangArea.updateId} IS NULL THEN hy.updateId ELSE :#{#huaYangArea.updateId} END " +
                "where hy.uid = :#{#huaYangArea.uid}")
        int update(@Param("huaYangArea") HuaYangArea huaYangArea);


springBoot jpa 分页
1、jap中有自带的分页方法

在dao层中使用
1、
    Page<LinkUrl> findAll(Pageable pageable);
2、在controller层
    public List<User> toPageList(int page, int size){
          Sort sort = new Sort(Sort.Direction.ASC, "id");  //DESC降序  ASC升序
          Pageable pageable = PageRequest.of(page,size,sort);
          Page<User> datas = userDAO.findAll(pageable);
          int totalElements = (int) datas.getTotalElements(); //总条数
          int totalPages =  datas.getTotalPages(); // 总页数
          List<User> content = datas.getContent(); // 数据列表
          return content;
      }
　


【Springboot 之 使用JPA进行分页操作】
    原生分页
    @Test
    public void test1() {
        Pageable pageable =new PageRequest(0, 5);
        Page<User> datas = userService.findAll(pageable);
        System.out.println("总条数："+datas.getTotalElements());
        System.out.println("总页数："+datas.getTotalPages());
        for(User u : datas) {
            System.out.println(u.getId()+"===="+u.getUserName());
        }
    }

    注意：继承了JpaRepository后的IUserService拥有了findAll的重载方法，当传入参数为Pageable时，返回传则是一个分页的对象Page。

    在创建Pageable接口的实例时需要指定其子类PageRequest,在PageRequest类中有几个构造函数：

    public PageRequest(int page, int size) {
        this(page, size, (Sort)null);
    }

    public PageRequest(int page, int size, Direction direction, String... properties) {
        this(page, size, new Sort(direction, properties));
    }

    public PageRequest(int page, int size, Sort sort) {
        super(page, size);
        this.sort = sort;
    }

    page：当前页码

    size：每页获取的条数

    direction：排序方式，ASC、DESC

    properties：排序的字段

    sort：排序对象

    封装分页且整合排序
    排序Dto对象
    public class SortDto {

        //排序方式
        private String orderType;

        //排序字段
        private String orderField;

        public String getOrderField() {
            return orderField;
        }

        public void setOrderField(String orderField) {
            this.orderField = orderField;
        }

        public String getOrderType() {
            return orderType;
        }

        public void setOrderType(String orderType) {
            this.orderType = orderType;
        }

        public SortDto(String orderType, String orderField) {
            this.orderType = orderType;
            this.orderField = orderField;
        }

        //默认为DESC排序
        public SortDto(String orderField) {
            this.orderField = orderField;
            this.orderType = "desc";
        }
    }

    排序封装类
    public class SortTools {

        public static Sort basicSort() {
            return basicSort("desc", "id");
        }

        public static Sort basicSort(String orderType, String orderField) {
            Sort sort = new Sort(Sort.Direction.fromString(orderType), orderField);
            return sort;
        }

        public static Sort basicSort(SortDto... dtos) {
            Sort result = null;
            for(int i=0; i<dtos.length; i++) {
                SortDto dto = dtos[i];
                if(result == null) {
                    result = new Sort(Sort.Direction.fromString(dto.getOrderType()), dto.getOrderField());
                } else {
                    result = result.and(new Sort(Sort.Direction.fromString(dto.getOrderType()), dto.getOrderField()));
                }
            }
            return result;
        }
    }


    分页封装类
    /**
     * Created by 钟述林 393156105@qq.com on 2016/10/21 15:45.
     */
    public class PageableTools {

        /**
         * 获取基础分页对象
         * @param page 获取第几页
         * @param size 每页条数
         * @param dtos 排序对象数组
         * @return
         */
        public static Pageable basicPage(Integer page, Integer size, SortDto... dtos) {
            Sort sort = SortTools.basicSort(dtos);
            page = (page==null || page<0)?0:page;
            size = (size==null || size<=0)?15:size;
            Pageable pageable = new PageRequest(page, size, sort);
            return pageable;
        }

        /**
         * 获取基础分页对象，每页条数默认15条
         *  - 默认以id降序排序
         * @param page 获取第几页
         * @return
         */
        public static Pageable basicPage(Integer page) {
            return basicPage(page, 0, new SortDto("desc", "id"));
        }

        /**
         * 获取基础分页对象，每页条数默认15条
         * @param page 获取第几页
         * @param dtos 排序对象数组
         * @return
         */
        public static Pageable basicPage(Integer page, SortDto... dtos) {
            return basicPage(page, 0, dtos);
        }

        /**
         * 获取基础分页对象，排序方式默认降序
         * @param page 获取第几页
         * @param size 每页条数
         * @param orderField 排序字段
         * @return
         */
        public static Pageable basicPage(Integer page, Integer size, String orderField) {
            return basicPage(page, size, new SortDto("desc", orderField));
        }

        /**
         * 获取基础分页对象
         *  - 每页条数默认15条
         *  - 排序方式默认降序
         * @param page 获取第几页
         * @param orderField 排序字段
         * @return
         */
        public static Pageable basicPage(Integer page, String orderField) {
            return basicPage(page, 0, new SortDto("desc", orderField));
        }
    }

    测试只传页码参数
    private void print(Page<User> datas) {
        System.out.println("总条数："+datas.getTotalElements());
        System.out.println("总页数："+datas.getTotalPages());
        for(User u : datas) {
            System.out.println(u.getId()+"===="+u.getUserName());
        }
    }

    @Test
    public void test2() {
        Page<User> datas = userService.findAll(PageableTools.basicPage(0));
        print(datas);
    }

    注意：print方法供其他测试方法公用，page：页码是从0开始。

    测试传页码和条数
    @Test
    public void test3() {
        Page<User> datas = userService.findAll(PageableTools.basicPage(1, 5));
        print(datas);
    }

    测试传页码、条数和排序
    @Test
    public void test4() {
        Page<User> datas = userService.findAll(PageableTools.basicPage(1, 5, new SortDto("id")));
        print(datas);

        Page<User> datas2 = userService.findAll(PageableTools.basicPage(1, 5, new SortDto("ASC", "id")));
        print(datas2);
    }

    其他几个重载方法可自行测试。笔者认为通过SortTools和PageableTools这两个封装类已能满足绝大部份的需求，如果您觉得还有更好的方式请与我联系并加以指正为谢！

    示例代码：https://github.com/zsl131/spring-boot-test/tree/master/study09


