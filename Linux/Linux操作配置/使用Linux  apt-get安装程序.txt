《Linux 安装程序》
	--CentOS 下安装apt-get
		安装apt: 
			$ yum install apt
		更新： 
			$ sudo apt-get update
			
	--apt-get指令管理安装包
		在上面说了那么多源码安装的缺点，聪明的盆友就要猜我我将要引出今天的主角：apt-get包管理应用软件，由apt-get管理的软件包可以轻松做到一键安装卸载。废话不多说，我们先看看它的常用用法：

		sudo apt-get install XXX
		sudo apt-get install -y XXX
		sudo apt-get install -q XXX
		sudo apt-get remove XXX
		sudo apt-get purge XXX
		sudo apt-get autoremove
		sudo apt-get update
		sudo apt-get upgrade
		apt-get install
		一键安装软件包，与源码安装不同的是，这个指令会自动检测并安装依赖，而且用apt-get安装的包都是成熟的软件包，基本不存在安装包有严重bug或者文件缺失的情况。

		sudo apt-get install -y
		这里主要将的就是-y选项，添加这个选项就相当于不需要重复地确认安装

		sudo apt-get install -q
		即-quiet，静默安装，当然也不是完全静默，会将低等级的log信息屏蔽。

		sudo apt-get remove
		既然有安装就会有卸载，remove指令就是卸载，值得注意的是，remove仅仅卸载软件，但是并不卸载配置文件

		sudo apt-get purge
		卸载指令，同时卸载相应的配置文件

		sudo apt-get autoremove
		关于这条指令，官方解释是这样的：

		autoremove is used to remove packages that were automatically installed to satisfy dependencies for other packages and are now no longer needed
		在卸载软件的时候同时卸载那些当初作为依赖但是现在并不需要的包。

		看起来非常完美的指令，但是博主建议慎用！！这条指令很可能将你要用的依赖包同时卸载，有时候你的安装包并没有通过apt-get指令来管理，apt-get管理工具不会加入这些包的信息，所以在检索包的依赖关系时可能出问题.

		又或者是另一种情况：举个例子：在安装某个包时，这个包依赖git，但是git并非你主动下载的，而是作为依赖下载的，包安装完之后系统可能就会提示git作为依赖不再需要使用，它并不知道你是不是正在使用这个软件包。

		apt-get update
		将所有包的来源更新，也就是提取最新的包信息，这一条我们经常使用到。

		apt-get upgrade
		这条指令一般执行在apt-get update之后，它的作用是将系统中旧版本的包升级成最新的，慎用！

		因为在linux下，由于大部分为非商业软件，所以稳定性并没有得到很好的验证，升级到最新版本需要十分慎重！

		apt-get执行原理
		如果仅仅知道怎么用而不知道为什么这么用，那就违背了学习使用linux的初衷，所以我们还是需要从原理出发来看apt-get指令时怎么运行的。

		提出问题
		首先需要知道的问题是：

		我们用apt-get下载的软件包是从哪里来的？

		下载之前要做哪些准备工作？

		软件从哪里来？
		所有的deb包由官方统一管理，那为什么我们能定位到这些软件包呢？这里就涉及到一个软件源的概念，在/etc/apt/目录下有一个sources.list文件，我们来看一下这个文件的内容：

		cat /etc/apt/sources.list  

		deb http://security.ubuntu.com/ubuntu trusty-security main restricted
		deb-src http://security.ubuntu.com/ubuntu trusty-security main restricted
		deb http://security.ubuntu.com/ubuntu trusty-security universe
		deb-src http://security.ubuntu.com/ubuntu trusty-security universe
		deb http://security.ubuntu.com/ubuntu trusty-security multiverse
		deb-src http://security.ubuntu.com/ubuntu trusty-security multiverse
		deb http://extras.ubuntu.com/ubuntu trusty main
		deb-src http://extras.ubuntu.com/ubuntu trusty main
		deb http://us.archive.ubuntu.com/ubuntu/ trusty-proposed main restricted multiverse universe   
		由于条目太多，这里只贴出一部分。可以看出来的是，这里都是一些资源网站，软件包资源当然就是出自这里。

		下载之前要做哪些工作
		实践出真知，我们来下载一个软件看看：

		Reading package lists... Done
		Building dependency tree       
		Reading state information... Done
		The following packages were automatically installed and are no longer required:
		account-plugin-windows-live libblas3 libbonobo2-0 libbonobo2-common
		libbonoboui2-common libglade2-0 libgnomecanvas2-0 libgnomecanvas2-common
		libgnomeui-common libidl-common libidl0 libisl10 liblinear-tools liblinear1
		libllvm3.5 libntdb1 liborbit-2-0 liborbit2 libupstart1
		linux-headers-3.16.0-30 linux-headers-3.16.0-30-generic
		linux-image-3.16.0-30-generic linux-image-extra-3.16.0-30-generic
		Use 'apt-get autoremove' to remove them.
		The following extra packages will be installed:
		libdiodon0 libunique-3.0-0
		Suggested packages:
		diodon-plugins
		The following NEW packages will be installed:
		diodon libdiodon0 libunique-3.0-0
		0 upgraded, 3 newly installed, 0 to remove and 221 not upgraded.
		Need to get 272 kB of archives.
		After this operation, 1,348 kB of additional disk space will be used.
		Do you want to continue? [Y/n] 
		这是前期准备工作的log信息，我们可以看到

		第一步是Reading package lists，这就是从/etc/apt/sources.list中检索可用的源中是否有这个软件包。

		然后从下面的log可以看出，下面的步骤就是生成软件依赖树，将需要的依赖包提前列出来，在安装所需软件之前进行安装。

		经常我们在下载软件的时候需要先添加源，很多盆友都不知道这是在干什么，看到这里大家应该是能看出个原因了：

		因为你需要下载的软件并不在官方源网站中，所以需要先行添加资源网站，apt-get才能根据相应的源检索到相应的资源，添加源有很多操作方式，归根结底就是一个操作结果：在/etc/apt/sources.list添加相应的资源网站，知道了这个，就可以直接在文件中添加源，但是要记住linux下最基本的一个习惯：操作系统文件时先备份。

		使用apt-get可能遇到的问题
		在使用apt-get install的时候，我们可能会遇到下面的问题：

		E: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable)
		E: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it?  
		碰到这种问题怎么解决呢？

		解决方法
		这种问题的原因是apt-get被占用，无法再次使用apt-get命令操作。解决办法分为两种：
		1、在终端输入，ps -ef | grep "apt-get",这个指令找出占用apt-get应用的进程，然后用sudo kill -9 PID强制结束进程

		2、但是也有可能找不到这个占用的进程，很可能你在上一次安装操作的时候意外断电，没有正常退出导致的，这个时候需要做的操作就是强制删除以下文件就可以：
		sudo rm /var/cache/apt/archives/lock
		sudo rm /var/lib/dpkg/lock
		从这里可以看出，其实就是删除两个锁文件，我们大可以猜想一下，系统在执行apt-get指令安装时，会在/var/lib/dpkg/和/var/cache/apt/archives/下生成lock文件，当指令正常退出时，系统会删除这个lock文件。

		这样就可以解释为什么删除这两个文件就可以恢复apt-get的自由。

		那我们就来验证一下，以安装diodon为例：

		sudo apt-get install diodon
		在系统询问是否继续时，我们先不操作，打开另一个终端。键入：

		ls /var/lib/dpkg/lock
		结果显示

		/var/lib/dpkg/lock
		表示是有这个文件的，然后我们关掉apt-get执行的进程，再检查没有操作apt-get文件时是否有这个文件：

		ls /var/lib/dpkg/lock  
		结果显示

		/var/lib/dpkg/lock
		居然还能查到这个文件，证明我们的猜想是错误的！那就再猜测：既然是lock文件，那么就涉及到文件锁，文件是一直存在的，但是在执行apt-get时被锁住了，在正常退出的时候被解锁，立马行动，同样的，先键入：

		sudo apt-get install diodon
		并让其停在用户确认界面，在查看系统中被锁住的文件，在终端键入：

		cat /proc/locks  #查看系统中被锁定的文件
		结果显示：
		1: POSIX ADVISORY WRITE 13604 08:01:792131 0 EOF
		2: POSIX ADVISORY WRITE 13604 08:01:792927 0 EOF
		3: OFDLCK ADVISORY WRITE -1 08:01:393386 0 0
		4: POSIX ADVISORY READ 2957 08:01:393504 128 128
		5: POSIX ADVISORY READ 2957 08:01:393381 1073741826 1073742335
		6: POSIX ADVISORY READ 2926 08:01:393504 128 128
		7: POSIX ADVISORY READ 2926 08:01:393381 1073741826 1073742335
		8: POSIX ADVISORY READ 2949 08:01:393504 128 128
		9: POSIX ADVISORY READ 2949 08:01:393381 1073741826 1073742335
		10: POSIX ADVISORY WRITE 2836 08:01:524297 0 EOF
		...仅显示用户级别

		然后关掉apt-get的进程，再次键入：

		cat /proc/locks  #查看系统中被锁定的文件
		结果显示
		1: OFDLCK ADVISORY WRITE -1 08:01:393386 0 0
		2: POSIX ADVISORY READ 2957 08:01:393504 128 128
		3: POSIX ADVISORY READ 2957 08:01:393381 1073741826 1073742335
		4: POSIX ADVISORY READ 2926 08:01:393504 128 128
		5: POSIX ADVISORY READ 2926 08:01:393381 1073741826 1073742335
		6: POSIX ADVISORY READ 2949 08:01:393504 128 128
		7: POSIX ADVISORY READ 2949 08:01:393381 1073741826 1073742335
		8: POSIX ADVISORY WRITE 2836 08:01:524297 0 EOF
		...#仅显示用户级别

		对比发现很明显，在使用apt-get的时候，系统中被锁定的文件明显多出两个，但是那一行数字是什么意思呢？下列是对照关系，

		number, type, mode,     type,   pid,    maj:min:inode     start    end
		1：     POSIX ADVISORY  WRITE   13604   08:01:792131      0        EOF  
		我们可以通过inode的对比来确认在apt-get操作时多出来的两个被锁住的文件到底是不是上述提到的那两个锁文件。

		ls -i /var/lib/dpkg/lock /var/cache/apt/archives/lock
		输出结果：

		792131 /var/cache/apt/archives/lock  792927 /var/lib/dpkg/lock
		很显然，inode为792131,792927的两个文件恰好是上述进行apt-get操作和不操作时被加锁的两个文件，这个猜想是正确的。

		但是问题又来了：当apt-get无法获取这两个锁文件的操作权限时，为什么删除这两个文件就可以了呢？这不会导致系统问题吗？
		带着这个疑问，我们继续来操作：

		sudo rm /var/cache/apt/archives/lock  /var/lib/dpkg/lock
		然后再查询文件：

		ls /var/cache/apt/archives/lock  /var/lib/dpkg/lock
		输出结果：

		ls: cannot access '/var/cache/apt/archives/lock': No such file or directory
		ls: cannot access '/var/lib/dpkg/lock': No such file or directory
		这下这两个文件是删除干净了，那我们得赶紧看看apt-get命令是否还能操作：

		sudo apt-get install diodon
		结果发现还是可以操作，这时候我再来看这两个文件：

		ls /var/cache/apt/archives/lock  /var/lib/dpkg/lock
		输出结果：

		/var/cache/apt/archives/lock  /var/lib/dpkg/lock
		居然又有了，这下是明白了，原来当我们遇到apt-get的无法获取锁的问题，直接删除这两个文件的同时这两个文件的锁自然也不存在了，在下一次重新使用apt-get指令时，系统检测到没有锁文件时就会创建这两个文件，同时进行apt-get操作。

		其实这是一种覆盖式的偷懒操作，我们大可以用修改文件的锁属性的方式来解决这个问题，在文件inode结构体中有一个

		struct file_lock *i_flock;  
		直接操作这个结构体就可以，但是这需要涉及到C和linux系统编程方面，在这里就不赘述了
		
	--工具及其说明
		install              其后加上软件包名，用于安装一个软件包
		update            从软件源镜像服务器上下载/更新用于更新本地软件源的软件包列表
		upgrade         升级本地可更新的全部软件包，但存在依赖问题时将不会升级，通常会在更新之前执行一次update
		dist-upgrade  解决依赖关系并升级(存在一定危险性)
		remove          移除已安装的软件包，包括与被移除软件包有依赖关系的软件包，但不包含软件包的配置文件
		autoremove   移除之前被其他软件包依赖，但现在不再被使用的软件包
		purge             与remove相同，但会完全移除软件包，包含其配置文件
		clean              移除下载到本地的已经安装的软件包，默认保存在/var/cache/apt/archives/
		autoclean       移除已安装的软件的旧版本软件包
		
		
	--下面是一些apt-get常用的参数：
		参数及其说明

		-y                　　　　自动回应是否安装软件包的选项，在一些自动化安装脚本中使用这个参数将十分有用
		-s                　　　　模拟安装
		-q               　　　　静默安装方式，指定多个q或者-q=#,#表示数字，用于设定静默级别，这在你不想要在安装软件包时屏幕输出过多时很有用
		-f                　　　　修复损坏的依赖关系
		-d               　　　　只下载不安装
		--reinstall    　　　   重新安装已经安装但可能存在问题的软件包
		--install-suggests     同时安装APT给出的建议安装的软件包
		
		安装软件包
			apt-get install <软件包名>
		你可以使用如下方式重新安装：
			$ sudo apt-get --reinstall install w3m
		软件升级
		# 更新软件源
			$ sudo apt-get update
		# 升级没有依赖问题的软件包
			$ sudo apt-get upgrade
		# 升级并解决依赖关系
			$ sudo apt-get dist-upgrade
		卸载软件
			apt-get remove <软件包名>
		#卸载w3m软件包
			$sudo apt-get remove w3m	
		
		
		
		
	
		