Docker 部署Nginx 并且挂载默认请求路径和配置文件	
	首先进入宿主机终端命令行 启动docker
	service docker start
	查看已安装docker镜像列表
	docker images


	如果没有安装就安装下
	docker pull nginx
	然后得启动这个镜像 正常启动是下面的命令,但是先别着急敲
	docker run -d -p 80:80 nginx 简单解释下这里面的值都代表啥意思
	-d 是让这个nginx容器服务后台运行
	-p 是指定端口 后面跟的80:80 前面的80是宿主机的端口 后面的是容器里nginx的端口, 比如改成 8080:80 那么我们在外部访问这个nginx服务 地址应该是 xx.xx.xx.xx:8080 就可以看到nginx的欢迎页了
	nginx 当然是启动的镜像名字啦
	但是啊,这么写不好,如果你像改这个nginx的配置文件,或者改个静态页咋改啊,我们得到这个容器的内部去改啊, 简单说下如何进入这个容器的内部

	先获取到这个nginx容器的id , 查询所有容器 无论是运行的还是exit的,其实在不在执行你都能看出来了,因为上面有exit标识着呢
	docker ps -a

	 你看,映射的端口号都给你了,我这里面没有其他被关闭的容器服务,我有强迫症,都清理了,你也有的话执行这个命令 xxxxx是这个容器的id 图里有
	docker rm xxxxx
	扯这么多没用的,现在开始说重点的,如果去改这个nginx容器里的配置文件,日志文件的具体路径和内容呢,这就要使用到挂载,我理解的挂载的意思就是在使用这个nginx容器的时候,不去使用容器内的配置和文件路径,使用宿主机上的资源文件,对了 我还没说怎么去容器内,执行这个命令,对了 你要是不是root用户前面加 sudo
	docker exec -it xxxx bash
	xxxx是容器id

	是不是有点眼熟 其实这个镜像自己的世界,不受外界打扰,但是功能指定没有宿主机全啊,比如你想在里面使用vim命令....

	我们接着回来谈挂载,既然你想挂载,你得知道你镜像里面nginx的配置文件啥的都在哪吧,然后挂载到你宿主机的指定位置啊,所以我们先看看他们都在哪呢
	镜像中nginx.conf配置文件路径
	/etc/nginx/nginx.conf
	default.conf配置文件的路径
	/etc/nginx/conf.d/default.conf
	默认首页文件夹html路径
	/usr/share/nginx/html
	日志文件路径
	/var/log/nginx

	{**********
		-- 进入到容器中：
		docker exec -it cc2a59fb2f32 /bin/bash
		--nginx 容器中的默认html 页面位置
		root@9c15cc3ad708:/usr/share/nginx/html# ls
		50x.html  index.html
		--nginx 容器中默认log日志 的位置
		[root@localhost nginx]# docker exec -it 582e12e336a4 bash
		root@582e12e336a4:/# cd /var/log/nginx
		root@582e12e336a4:/var/log/nginx# ls
		access.log  error.log
		--将nginx容器中的内容拷贝到/usr/share/nginx/* 目录下
		 docker cp 7bb1d04ee287:/usr/share/nginx/html /usr/local/nginx/nginx/
		 docker cp 582e12e336a4:/var/log/nginx/error.log /usr/local/nginx/nginx/logs
		--使用外挂文件运行nginx  外挂文件路径：/usr/local/nginx/nginx/*
		 docker run -d -p 80:80 --name mynginx 
			-v /usr/local/nginx/nginx/nginx.conf:/etc/nginx/nginx.conf 
			-v /usr/local/nginx/nginx/conf.d:/etc/nginx/conf.d nginx
			-v /usr/local/nginx/nginx/html:/usr/share/nginx/html

	--* 注意部署静态网站要将，放在linux中的静态网页路径挂在到容器中的html中去*--
	---------《实例》---------
		/usr/local/nginx/cpts    #静态网页路径 （Linux中上传文件命令：rz）
		 docker run -d -p 80:80 --name mynginx 
			-v /usr/local/nginx/nginx/nginx.conf:/etc/nginx/nginx.conf 
			-v /usr/local/nginx/nginx/conf.d:/etc/nginx/conf.d 
			-v /usr/local/nginx/cpts:/usr/share/nginx/html nginx 
			#直接将静态网页的目录映射到nginx容器中的html中！

		解压zip文件到当前目录 使用网址：https://www.cnblogs.com/yves0923/p/10965021.html
		unzip filename.zip
		============================
		另：有些服务器没有安装zip包执行不了zip命令，但基本上都可以用tar命令的，实例如下：
		tar -zcvf /home/zdzlibs.tar.gz /home/zdz/java/zdzlibs/
		
	*********}

	 来个图验证一下, 然后输入 exit 退出nginx容器回到宿主机
	下面在宿主机上建挂载使用的文件夹
	mkdir -p /nginx/{conf,conf.d,html,logs} 建这4个文件夹都知道是干啥用的了吧, 没权限记住前面加sudo

	下面就开始往对应的路径扔配置文件或者资源文件了,logs里不用,挂载好自动往里输出 error.log 和 access.log
	html里你放首页需要展示的.html文件,然后你在访问,你加进来的html就把默认的nginx欢迎界面替换掉了...现在整没有用啊,你还没挂载呢,等会的。

	conf里放 nginx.conf 配置文件, 这个文件的内容要从镜像里的复制出来哦,我们尽量保持和镜像里面的一致
	下面我们再来说说怎么将刚刚在容器里看到的配置文件copy到宿主机里面
	前面是容器的路径 后面是宿主机的路径 docker cp 容器id:/etc/nginx/nginx.conf /nginx/conf/nginx.conf

	 
	user  nginx;
	worker_processes  1;
	 
	error_log  /var/log/nginx/error.log warn;
	pid        /var/run/nginx.pid;
	 
	 
	events {
		worker_connections  1024;
	}
	 
	 
	http {
		include       /etc/nginx/mime.types;
		default_type  application/octet-stream;
	 
		log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
						  '$status $body_bytes_sent "$http_referer" '
						  '"$http_user_agent" "$http_x_forwarded_for"';
	 
		access_log  /var/log/nginx/access.log  main;
	 
		sendfile        on;
		#tcp_nopush     on;
	 
		keepalive_timeout  65;
	 
		#gzip  on;
	 
		include /etc/nginx/conf.d/*.conf;
	}
	复制代码
	同样在把conf.d 下的default.conf 复制过来
	docker cp 容器id:/etc/nginx/conf.d/default.conf /nginx/conf.d/default.conf

	server {
		listen       80;
		server_name  localhost;
	 
		#charset koi8-r;
		#access_log  /var/log/nginx/host.access.log  main;
	 
		location / {
			root   /usr/share/nginx/html;
			index  index.html index.htm;
		}
	 
		#error_page  404              /404.html;
	 
		# redirect server error pages to the static page /50x.html
		#
		error_page   500 502 503 504  /50x.html;
		location = /50x.html {
			root   /usr/share/nginx/html;
		}
	 
		# proxy the PHP scripts to Apache listening on 127.0.0.1:80
		#
		#location ~ \.php$ {
		#    proxy_pass   http://127.0.0.1;
		#}
	 
		# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
		#
		#location ~ \.php$ {
		#    root           html;
		#    fastcgi_pass   127.0.0.1:9000;
		#    fastcgi_index  index.php;
		#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
		#    include        fastcgi_params;
		#}
	 
		# deny access to .htaccess files, if Apache's document root
		# concurs with nginx's one
		#
		#location ~ /\.ht {
		#    deny  all;
		#}
	}
	 
	 
	复制代码
	然后,我们自己写一个简单的html页面,给他随意命个名,我就不改了,叫index.html

	然后把这个文件丢到 宿主机的 /nginx/html/ 路径下
	我是用FileZilla工具传输文件到宿主机的

	最后到了最关键的环节了

	开始挂载了 我们先把之前起的nginx容器服务关闭了 我直接一点, docker rm 容器id OMG 我们得先关闭再删除, docker stop 容器id

	都弄好了之后再次启动 这次和上次不同之处就是需要用到 -v 进行挂载了

	docker run --name mynginx -d -p 80:80 -v /nginx/html:/usr/share/nginx/html -v /nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf -v /nginx/logs:/var/log/nginx nginx
	复制代码
	前面是宿主机路径 后面的nginx容器路径

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Liunx中使用Docker安装.配置Nginx,SSL证书
		什么是Nginx?
	Nginx是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器；同时也是一个IMAP、POP3、SMTP代理服务器；Nginx可以作为一个HTTP服务器进行网站的发布处理，另外Nginx可以作为反向代理进行负载均衡的实现。

	安装
	1.拉取镜像

	docker pull nginx
	2.创建nginx容器

	docker run -di --name=容器名称 -p 本地端口:映射端口(比如80:80) nginx
	//-p 假如要监听多个端口，可多写例：-p 80:80 -p 443:443
	使用
	我们安装好了之后，查看容器是否在运行，执行命令

	[root@VM_0_8_centos ~]# docker ps
	CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                      NAMES
	51451b4303a8        nginx               "nginx -g 'daemon of…"   28 minutes ago      Up 28 minutes       0.0.0.0:80->80/tcp, 0.0.0.0:443->443/tcp   mynginx
	965f45a82cff        mysql               "docker-entrypoint.s…"   3 days ago          Up 3 days           33060/tcp, 0.0.0.0:33306->3306/tcp         tensquare_mysql
	aa3f9a98ec8d        redis               "docker-entrypoint.s…"   3 days ago          Up 3 days           0.0.0.0:6379->6379/tcp                     myredis

	可以清楚的看到，自己创建的容器是否在运行
	一些简单的这方面的指令

	docker ps //查看运行的容器
	docker ps -a //查看所有容器
	docker restart 容器名称 //重启容器
	docker start 容器名称 //启动容器
	docker stop 容器名称 //重启容器
	docker rm 容器名称 //删除容器
	dockers exec -it 容器名称 /bin/bash //进入容器
	exit //退出容器
	文件挂载
	我们选择docker运行nginx服务器的时候，一般来说使用文件挂载会好一些，文件挂载步骤
	1.创建一个临时容器 docker run -d --name nginx_test -p 9000:9000 nginx
	2.进入该容器 docker exec -it nginx_test /bin/bash
	3.将目录/etc/nginx/复制到本地目录/opt/local docker cp nginx_test:/etc/nginx/ /opt/local
	4.停止该容器 docker stop nginx_test
	5.删除该容器 docker rm nginx_test
	6.创建新的容器挂载本地目录 docker run -di --name mynginx -p 80:80 -v /opt/local/nginx/logs:/var/log/nginx -v /opt/local/nginx:/etc/nginx nginx
	7.容器的配置文件，就在本地的/opt/local/nginx配置即可
	8.浏览器打开服务器ip地址，显示nginx相关，即配置成功

	端口映射转发配置
	一般用于一个服务器挂载多个服务，多个域名的时候，我们使用到这个
	1.进入/opt/local/nginx/conf.d目录 cd /opt/local/nginx/conf.d
	2.复制一份default.conf文件 cp default.conf my.conf
	3.修改重要配置，如下,新增一个域名监听则新增一个文件监听然后转发即可

		listen       80; #监听的端口
		server_name  baidu.com www.baidu.com;#填写监听的域名
		location / {
			proxy_pass http://ip:端口;
		}
	ssl证书的配置
	ssl证书是监听443端口，但是我们网络请求的时候，不会去输入https请求头，所以默认请求的是80端口，我们要做一个判断，假如是80端口则进行转发到443端口
	按照以下配置

	server {
		listen 80;
		listen 443 ssl;
		server_name  www.wocusx.cn wocusx.cn;
		ssl on;
		ssl_certificate 1_xxxxx_bundle.crt;
		ssl_certificate_key 2_xxxxx.key;
		ssl_session_timeout 5m;
		ssl_protocols TLSv1 TLSv1.1 TLSv1.2; 
		ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;
		ssl_prefer_server_ciphers on;
		#charset koi8-r;
		#access_log  /var/log/nginx/host.access.log  main;
		if ($server_port = 80) {
			return 301 https://$server_name$request_uri;
			}
		if ($scheme = http) {
			return 301 https://$server_name$request_uri;
			}
		 error_page 497 https://$server_name$request_uri;
	}
	注意
	1.每次修改conf配置文件需要重启nginx
	2.nignx监听的端口由创建的时候-p命令决定，如已经创建，需要修改进入到该nginx容器/var/lib/docker/containers/{容器 ID+ 一些字符串}/hostconfig.json中修改

	"PortBindings":{"容器端口 /tcp":[{"HostIp":"","HostPort":"宿主机端口"}]
	同时修改同目录下的 config.v2.json

	"Ports":{"容器端口 /tcp":[{"HostIp":"0.0.0.0","HostPort":"宿主机端口"}]} 
	然后重启容器即可
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
docker部署nginx并且挂载文件夹和文件
		这段时间在研究docker，在部署nginx时遇到了坑，最主要的问题是在挂载文件和文件夹的时候不知道怎么挂载，经过反复实验以及查看网上的教程，先总结如下：

	1首先pull下载nginx镜像包

	docker pull nginx
	2（关键）查看nginx镜像里面配置文件、日志等文件的具体位置，只有找到镜像配置文件的路径，后面挂载文件和文件夹才能覆盖这些路径

	以终端的方式打开镜像容器

	[root@docker2 nginx]# docker run -i -t nginx /bin/bash
	root@3b39da9212fe:/# ls -l
	total 8
	drwxr-xr-x   2 root root 4096 Apr 26 00:00 bin
	drwxr-xr-x   2 root root    6 Feb 23 23:23 boot
	drwxr-xr-x   5 root root  360 May 30 01:39 dev
	drwxr-xr-x   1 root root   66 May 30 01:39 etc
	drwxr-xr-x   2 root root    6 Feb 23 23:23 home
	drwxr-xr-x   1 root root   45 Apr 26 00:00 lib
	drwxr-xr-x   2 root root   34 Apr 26 00:00 lib64
	drwxr-xr-x   2 root root    6 Apr 26 00:00 media
	drwxr-xr-x   2 root root    6 Apr 26 00:00 mnt
	drwxr-xr-x   2 root root    6 Apr 26 00:00 opt
	dr-xr-xr-x 176 root root    0 May 30 01:39 proc
	drwx------   2 root root   37 Apr 26 00:00 root
	drwxr-xr-x   4 root root   43 Apr 26 00:00 run
	drwxr-xr-x   2 root root 4096 Apr 26 00:00 sbin
	drwxr-xr-x   2 root root    6 Apr 26 00:00 srv
	dr-xr-xr-x  13 root root    0 May 25 06:07 sys
	drwxrwxrwt   1 root root    6 Apr 30 13:55 tmp
	drwxr-xr-x   1 root root   66 Apr 26 00:00 usr
	drwxr-xr-x   1 root root   17 Apr 26 00:00 var
	找到镜像中nginx.conf配置文件路径/etc/nginx/nginx.conf

	root@3b39da9212fe:/etc/nginx# ls -l /etc/nginx/
	total 36
	drwxr-xr-x 2 root root   26 Apr 30 13:55 conf.d
	-rw-r--r-- 1 root root 1007 Apr  9 16:01 fastcgi_params
	-rw-r--r-- 1 root root 2837 Apr  9 16:01 koi-utf
	-rw-r--r-- 1 root root 2223 Apr  9 16:01 koi-win
	-rw-r--r-- 1 root root 5170 Apr  9 16:01 mime.types
	lrwxrwxrwx 1 root root   22 Apr  9 16:01 modules -> /usr/lib/nginx/modules
	-rw-r--r-- 1 root root  643 Apr  9 16:01 nginx.conf
	-rw-r--r-- 1 root root  636 Apr  9 16:01 scgi_params
	-rw-r--r-- 1 root root  664 Apr  9 16:01 uwsgi_params
	-rw-r--r-- 1 root root 3610 Apr  9 16:01 win-utf
	找到default.conf配置文件的路径/etc/nginx/conf.d/default.conf

	root@3b39da9212fe:/etc# ls -l /etc/nginx/conf.d/             
	total 4
	-rw-r--r-- 1 root root 1093 Apr  9 16:01 default.conf
	找到默认首页文件夹html路径/usr/share/nginx/html

	root@3b39da9212fe:/etc# ls -l /usr/share/nginx/     
	total 0
	drwxr-xr-x 2 root root 40 Apr 30 13:55 html
	找到日志文件路径/var/log/nginx

	ls -l /var/log/     
	total 96
	drwxr-xr-x 1 root root    60 Apr 30 13:55 apt
	-rw-rw---- 1 root utmp     0 Apr 26 00:00 btmp
	-rw-r--r-- 1 root root 57602 Apr 30 13:55 dpkg.log
	-rw-r--r-- 1 root root  3264 Apr 30 13:55 faillog
	-rw-rw-r-- 1 root utmp 29784 Apr 30 13:55 lastlog
	drwxr-xr-x 1 root root    41 Apr 30 13:55 nginx
	-rw-rw-r-- 1 root utmp     0 Apr 26 00:00 wtmp
	然后输入exit退出容器的终端

	3用nginx镜像启动容器mynginx并且挂载文件夹和文件到容器中

	这里说明一下为什么我要挂载配置文件和文件夹，如果你部署应用并且很轻易地修改nginx的配置文件，如果挂载了文件或者文件夹那么你只需要修改挂载源的文件或者文件夹里面的文件就可以了，而不用每次都要使用docker run -i -t nginx /bin/bash命令进入到镜像终端中去修改配置文件，下面我将演示修改自己的nginx首页，并且将其挂载上去容器中覆盖掉原来的默认的首页

	在linux系统中创建挂载源文件和文件夹（我的是centos7）

	mkdir -p /data/nginx/conf
	mkdir -p /data/nginx/conf.d
	mkdir -p /data/nginx/html
	mkdir -p /data/nginx/logs
	然后创建在conf文件夹里面创建一个nginx.conf配置文件，并且输入一下内容，建议大家不要照抄我的配置，用我上面介绍的第一步的方法进入到nginx容器的终端中复制nginx.conf配置文件的内容到linux系统中这个新创建的nginx.conf文件中进行修改，这样子就保证了配置文件中的路径与镜像中配置文件的路径能保持一致

	[root@docker2 /]# cd /data/nginx/conf
	[root@docker2 conf]# more nginx.conf 
	user  nginx;
	worker_processes  1;
	 
	error_log  /var/log/nginx/error.log warn;
	pid        /var/run/nginx.pid;
	 
	 
	events {
		worker_connections  1024;
	}
	 
	 
	http {
		include       /etc/nginx/mime.types;
		default_type  application/octet-stream;
	 
		log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
						  '$status $body_bytes_sent "$http_referer" '
						  '"$http_user_agent" "$http_x_forwarded_for"';
	 
		access_log  /var/log/nginx/access.log  main;
	 
		sendfile        on;
		#tcp_nopush     on;
	 
		keepalive_timeout  65;
	 
		#gzip  on;
	 
		include /etc/nginx/conf.d/*.conf;
	}
	在conf.d里面创建一个default.conf文件，并且输入一下内容，同样这个内容也是我从镜像中default.conf默认的配置文件中复制过来修改的，同样建议大家不要照抄我的内容，因为涉及到路径那些可能会与你们nginx镜像中的路径不一致，这样子在启动镜像创建容器的时候就无法用挂载的方法覆盖掉容器中的路径

	[root@docker2 conf]#  more /data/nginx/conf.d/default.conf   
	server {
		listen       80;
		server_name  localhost;
	 
		#charset koi8-r;
		#access_log  /var/log/nginx/host.access.log  main;
	 
		location / {
			root   /usr/share/nginx/html;
			index 1.html;
		}
	 
		#error_page  404              /404.html;
	 
		# redirect server error pages to the static page /50x.html
		#
		error_page   500 502 503 504  /50x.html;
		location = /50x.html {
			root   /usr/share/nginx/html;
		}
	 
		# proxy the PHP scripts to Apache listening on 127.0.0.1:80
		#
		#location ~ \.php$ {
		#    proxy_pass   http://127.0.0.1;
		#}
	 
		# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
		#
		#location ~ \.php$ {
		#    root           html;
		#    fastcgi_pass   127.0.0.1:9000;
		#    fastcgi_index  index.php;
		#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
		#    include        fastcgi_params;
		#}
	 
		# deny access to .htaccess files, if Apache's document root
		# concurs with nginx's one
		#
		#location ~ /\.ht {
		#    deny  all;
		#}
	}
	大家注意了，这里我修改了一下原来默认配置文件里面的内容，在上面的其中一个location中，我把nginx默认首页index改成了1.html，1.html是我自己创建的首页名

	在html文件夹下创建1.html首页文件，并且编写属于自己的首页，这里我是用notepadd++在windows上面写好了1.html文件再通过工具拷过去linux系统里面的，注意有中文的可能要转换下编码，不然可能会乱码，例如我这里用的是ansi的编码

	<html>
	<head>
	<title>Mynginx</title>
	</head>
	<body>
	<h1>
	欢迎使用nginx！
	</h1>
	</body>
	</html>
	现在是创建容器并且挂载文件和文件夹了

	[root@docker2 conf]# docker run  --name mynginx -d -p 80:80 -v /data/nginx/html:/usr/share/nginx/html -v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /data/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf  -v /data/nginx/logs:/var/log/nginx nginx

	记住挂载的目标目录或者文件路径要与镜像中的路径保持一致如/etc/nginx/nginx.conf，这个路径在第二步里面已经找出来了

	docker ps 查看有没有启动成功

	[root@docker2 conf]# docker ps 
	CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
	32ad171d34a2        nginx               "nginx -g 'daemon of…"   17 hours ago        Up 17 hours         0.0.0.0:80->80/tcp       mynginx
	如果没有启动成功要先用docker ps -a查看失败的容器，并且用docker rm CONTAILNER ID删除容器ID，再查找问题，然后docker run再启动容器，如果在确保挂载的目录和文件没有问题还是不能启动的话，那么就是权限问题了，网上说的就是在docker run后面加个 --privileged=true参数

	http://IP  打开网页看看效果把
	 ———————————————— 
	
Nginx的n种用法，你都会吗？{ 正向代理、反向代理、透明代理、负载均衡、静态服务器、nginx的安装}
	
	nginx作为一个高性能的web服务器，想必大家垂涎已久，蠢蠢欲动，想学习一番了吧，语法不多说，网上一大堆。下面博主就nginx的非常常用的几个功能做一些讲述和分析，学会了这几个功能，平常的开发和部署就不是什么问题了。

	作者：假不理来源：编程无界|2018-12-14 12:07 收藏  分享

	本文旨在用最通俗的语言讲述最枯燥的基本知识

	nginx作为一个高性能的web服务器，想必大家垂涎已久，蠢蠢欲动，想学习一番了吧，语法不多说，网上一大堆。下面博主就nginx的非常常用的几个功能做一些讲述和分析，学会了这几个功能，平常的开发和部署就不是什么问题了。因此希望大家看完之后，能自己装个nginx来学习配置测试，这样才能真正的掌握它。

	文章提纲：

	正向代理
	反向代理
	透明代理
	负载均衡
	静态服务器
	nginx的安装


	1. 正向代理

	正向代理：内网服务器主动去请求外网的服务的一种行为

	光看概念，可能有读者还是搞不明白：什么叫做“正向”，什么叫做“代理”，我们分别来理解一下这两个名词。

	正向：相同的或一致的方向

	代理：自己做不了的事情或者自己不打算做的事情，委托或依靠别人来完成。

	借助解释，回归到nginx的概念，正向代理其实就是说客户端无法主动或者不打算完成主动去向某服务器发起请求，而是委托了nginx代理服务器去向服务器发起请求，并且获得处理结果，返回给客户端。

	从下图可以看出：客户端向目标服务器发起的请求，是由代理服务器代替它向目标主机发起，得到结果之后，通过代理服务器返回给客户端。



	举个栗子：广大社会主义接班人都知道，为了保护祖国的花朵不受外界的乌烟瘴气熏陶，国家对网络做了一些“优化”，正常情况下是不能外网的，但作为程序员的我们如果没有谷歌等搜索引擎的帮助，再销魂的代码也会因此失色，因此，网络上也曾出现过一些fan qiang技术和软件供有需要的人使用，如某VPN等，其实VPN的原理大体上也类似于一个正向代理，也就是需要访问外网的电脑，发起一个访问外网的请求，通过本机上的VPN去寻找一个可以访问国外网站的代理服务器，代理服务器向外国网站发起请求，然后把结果返回给本机。

	正向代理的配置:

	server { 
	#指定DNS服务器IP地址   
	resolver 114.114.114.114;    
	#指定代理端口     
	listen 8080;   
	location / { 
	#设定代理服务器的协议和地址（固定不变）     
	proxy_pass http://$http_host$request_uri;  
	}   
	}  
	这样就可以做到内网中端口为8080的服务器主动请求到1.2.13.4的主机上，如在Linux下可以：

	curl --proxy proxy_server:8080 http://www.taobao.com/ 
	正向代理的关键配置：

	resolver：DNS服务器IP地址
	listen：主动发起请求的内网服务器端口
	proxy_pass：代理服务器的协议和地址
	2. 反向代理

	反向代理：reverse proxy，是指用代理服务器来接受客户端发来的请求，然后将请求转发给内网中的上游服务器，上游服务器处理完之后，把结果通过nginx返回给客户端。

	上面讲述了正向代理的原理，相信对于反向代理，就很好理解了吧。

	反向代理是对于来自外界的请求，先通过nginx统一接受，然后按需转发给内网中的服务器，并且把处理请求返回给外界客户端，此时代理服务器对外表现的就是一个web服务器，客户端根本不知道“上游服务器”的存在。



	举个栗子：一个服务器的80端口只有一个，而服务器中可能有多个项目，如果A项目是端口是8081，B项目是8082，C项目是8083，假设指向该服务器的域名为www.xxx.com，此时访问B项目是www.xxx.com:8082，以此类推其它项目的URL也是要加上一个端口号，这样就很不美观了，这时我们把80端口给nginx服务器，给每个项目分配一个独立的子域名，如A项目是a.xxx.com，并且在nginx中设置每个项目的转发配置，然后对所有项目的访问都由nginx服务器接受，然后根据配置转发给不同的服务器处理。具体流程如下图所示：



	反向代理配置:

	server { 
		#监听端口 
		listen 80; 
		#服务器名称，也就是客户端访问的域名地址 
		server_name  a.xxx.com; 
		#nginx日志输出文件 
		access_log  logs/nginx.access.log  main; 
		#nginx错误日志输出文件 
		error_log  logs/nginx.error.log; 
		root   html; 
		index  index.html index.htm index.php; 
		location / { 
			#被代理服务器的地址 
			proxy_pass  http://localhost:8081; 
			#对发送给客户端的URL进行修改的操作 
			proxy_redirect     off; 
			proxy_set_header   Host             $host; 
			proxy_set_header   X-Real-IP        $remote_addr; 
			proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for; 
			proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504; 
			proxy_max_temp_file_size 0; 
	   } 
	} 
	这样就可以通过a.xxx.com来访问a项目对应的网站了，而不需要带上难看的端口号。

	反向代理的配置关键点是：

	server_name：代表客户端向服务器发起请求时输入的域名
	proxy_pass：代表源服务器的访问地址，也就是真正处理请求的服务器(localhost+端口号)。
	3. 透明代理

	透明代理：也叫做简单代理，意思客户端向服务端发起请求时，请求会先到达透明代理服务器，代理服务器再把请求转交给真实的源服务器处理，也就是是客户端根本不知道有代理服务器的存在。

	举个栗子：它的用法有点类似于拦截器，如某些制度严格的公司里的办公电脑，无论我们用电脑做了什么事情，安全部门都能拦截我们对外发送的任何东西，这是因为电脑在对外发送时，实际上先经过网络上的一个透明的服务器，经过它的处理之后，才接着往外网走，而我们在网上冲浪时，根本没有感知到有拦截器拦截我们的数据和信息。



	有人说透明代理和反向代理有点像，都是由代理服务器先接受请求，再转发到源服务器。其实本质上是有区别的，透明代理是客户端感知不到代理服务器的存在，而反向代理是客户端感知只有一个代理服务器的存在，因此他们一个是隐藏了自己，一个是隐藏了源服务器。事实上，透明代理和正向代理才是相像的，都是由客户端主动发起请求，代理服务器处理;他们差异点在于：正向代理是代理服务器代替客户端请求，而透明代理是客户端在发起请求时，会先经过透明代理服务器，再达到服务端，在这过程中，客户端是感知不到这个代理服务器的。

	4. 负载均衡

	负载均衡：将服务器接收到的请求按照规则分发的过程，称为负载均衡。负载均衡是反向代理的一种体现。

	可能绝大部分人接触到的web项目，刚开始时都是一台服务器就搞定了，但当网站访问量越来越大时，单台服务器就扛不住了，这时候需要增加服务器做成集群来分担流量压力，而在架设这些服务器时，nginx就充当了接受流量和分流的作用了，当请求到nginx服务器时，nginx就可以根据设置好的负载信息，把请求分配到不同的服务器，服务器处理完毕后，nginx获取处理结果返回给客户端，这样，用nginx的反向代理，即可实现了负载均衡。



	nginx实现负载均衡有几种模式：

	1.轮询：每个请求按时间顺序逐一分配到不同的后端服务器，也是nginx的默认模式。轮询模式的配置很简单，只需要把服务器列表加入到upstream模块中即可。

	下面的配置是指：负载中有三台服务器，当请求到达时，nginx按照时间顺序把请求分配给三台服务器处理。

	upstream serverList { 
	server 1.2.3.4; 
	server 1.2.3.5; 
	server 1.2.3.6; 
	} 
	2.ip_hash：每个请求按访问IP的hash结果分配，同一个IP客户端固定访问一个后端服务器。可以保证来自同一ip的请求被打到固定的机器上，可以解决session问题。

	下面的配置是指：负载中有三台服务器，当请求到达时，nginx优先按照ip_hash的结果进行分配，也就是同一个IP的请求固定在某一台服务器上，其它则按时间顺序把请求分配给三台服务器处理。

	upstream serverList { 
		ip_hash 
		server 1.2.3.4; 
		server 1.2.3.5; 
		server 1.2.3.6; 
	} 
	3.url_hash：按访问url的hash结果来分配请求，相同的url固定转发到同一个后端服务器处理。

	upstream serverList { 
		server 1.2.3.4; 
		server 1.2.3.5; 
		server 1.2.3.6; 
		hash $request_uri;  
		hash_method crc32;  
	} 
	fair：按后端服务器的响应时间来分配请求，响应时间短的优先分配。

	upstream serverList { 
		server 1.2.3.4; 
		server 1.2.3.5; 
		server 1.2.3.6; 
		fair; 
	} 
	而在每一种模式中，每一台服务器后面的可以携带的参数有：

	down: 当前服务器暂不参与负载
	weight: 权重，值越大，服务器的负载量越大。
	max_fails：允许请求失败的次数，默认为1。
	fail_timeout:max_fails次失败后暂停的时间。
	backup：备份机， 只有其它所有的非backup机器down或者忙时才会请求backup机器。
	如下面的配置是指：负载中有三台服务器，当请求到达时，nginx按时间顺序和权重把请求分配给三台服务器处理，例如有100个请求，有30%是服务器4处理，有50%的请求是服务器5处理，有20%的请求是服务器6处理。

	upstream serverList { 
		server 1.2.3.4 weight=30; 
		server 1.2.3.5 weight=50; 
	   server 1.2.3.6 weight=20; 
	} 
	如下面的配置是指：负载中有三台服务器，服务器4的失败超时时间为60s，服务器5暂不参与负载，服务器6只用作备份机。

	upstream serverList { 
		server 1.2.3.4 fail_timeout=60s; 
		server 1.2.3.5 down; 
		server 1.2.3.6 backup; 
	} 
	下面是一个配置负载均衡的示例(只写了关键配置)：

	其中：

	upstream：是负载的配置模块，serverList是名称，随便起

	server_name：是客户端请求的域名地址

	proxy_pass：是指向负载的列表的模块，如serverList

	upstream serverList { 
		 server 1.2.3.4 weight=30; 
		 server 1.2.3.5 down; 
		 server 1.2.3.6 backup; 
	 }    
	  
	 server { 
		 listen 80; 
		 server_name  www.xxx.com; 
		root   html; 
		index  index.html index.htm index.php; 
		location / { 
			proxy_pass  http://serverList; 
			proxy_redirect     off; 
			proxy_set_header   Host             $host; 
	   } 
	} 
	5. 静态服务器

	现在很多项目流行前后分离，也就是前端服务器和后端服务器分离，分别部署，这样的方式能让前后端人员能各司其职，不需要互相依赖，而前后分离中，前端项目的运行是不需要用Tomcat、Apache等服务器环境的，因此可以直接用nginx来作为静态服务器。

	静态服务器的配置如下,其中关键配置为：

	root：直接静态项目的绝对路径的根目录。
	server_name : 静态网站访问的域名地址。
	server { 
		   listen       80;                                                          
		   server_name  www.xxx.com;                                                
		   client_max_body_size 1024M; 
		   location / { 
				  root   /var/www/xxx_static; 
				  index  index.html; 
			  } 
	   } 
	6. nginx的安装

	学了这么多nginx的配置用法之后，我们需要对每一个知识点做一下测试，才能印象深刻，在此之前，我们需要知道nginx是怎么安装，下面以Linux环境为例，简述yum方式安装nginx的步骤：

	安装依赖：

	//一键安装上面四个依赖 
	yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel 
	安装nginx：

	yum install nginx 
	检查是否安装成功：

	nginx -v 
	启动/挺尸nginx：

	/etc/init.d/nginx start 
	2/etc/init.d/nginx stop 
	编辑配置文件：

	/etc/nginx/nginx.conf 
	这些步骤都完成之后，我们就可以进入nginx的配置文件nginx.conf对上面的各个知识点，进行配置和测试了。



