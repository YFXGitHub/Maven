这是一个服务消费者、
    在没有使用Eureka 服务注册时，是这样做的：
        1.创建一个com.yfx.spring.cloud.controller.ConsumerController 的服务消费类
            @RestController
            public class ConsumerController {       //这是一个消费类

                @Autowired
                private RestTemplate restTemplate;      //这个是：若要调用服务提供者，就要定义此工具类

                @GetMapping("/web")
                public String toClient(){
                    /**
                     想要调用springcolud-service-provider的工程模块，
                     就要在配置文件中定义一个RestTemplate 这样的类，如下就是使用方式！

                     * 但此种方式就是手动的去指定一个访问地址，若要有多个或者中途模块更换，这样的效率是低的！
                     */

                    //.getBody(); 返回一个字符串
                    return  restTemplate.getForEntity("http://localhost:8080/service", String.class).getBody();
                }
            }

        2.定义RestTemplate  工具类：
            @Configuration      //这是一个配置类  等价于 spring 中的 *.xml
            public class BeanConfig {

                /**
                 * @Bean
                 * 等价于
                 *          <bean id="restTemplate" class="***.RestTemplate"></bean>
                 * @return
                 */
                @Bean
                public RestTemplate restTemplate(){

                    return new RestTemplate();
                }
            }
        ----- 即可运行。。。。。。。。。

若使用Eureka:
    1.pom.xml  引入依赖：
      <!--Eureka 客户端的依赖 -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
      </dependency>

       <!-- 注意在使用Eureka 的同时，也要引入此依赖 -->
          <dependencyManagement>
              <dependencies>
                  <dependency>
                      <groupId>org.springframework.cloud</groupId>
                      <artifactId>spring-cloud-dependencies</artifactId>
                      <version>Finchley.RELEASE</version>
                      <type>pom</type>
                      <scope>import</scope>
                  </dependency>
              </dependencies>
          </dependencyManagement>

    2.在application.properties配置文件中 配置以下信息：
        #设置tomcat 的访问端口号
        server.port=8081

        #配置服务的名称    在微服务中每个项目都应该有名称， 注意这个项目名最好与工程名一致
        spring.application.name=springcloud-service-consumer
        #eureka Server的链接地址
        eureka.client.service-url.defaultZone= http://localhost:3/eureka

    3.注意要在主程序中添加如下配置：
        @SpringBootApplication
        @EnableEurekaClient         //开启EurekaClient客户端
        public class SpringcloudServiceConsumerApplication {

            public static void main(String[] args) {
                SpringApplication.run(SpringcloudServiceConsumerApplication.class, args);
            }

        }

     4.同时要在 配置类中修改 如下：
        @Configuration      //这是一个配置类  等价于 spring 中的 *.xml
        public class BeanConfig {

            /**
             * @Bean
             * 等价于
             *          <bean id="restTemplate" class="***.RestTemplate"></bean>
             * @return
             */
            @LoadBalanced       //Ribbon  的负载均衡注解
            @Bean
            public RestTemplate restTemplate(){

                return new RestTemplate();
            }

        }

    5.在Controller 中修改如下配置：
        @RestController
        public class ConsumerController {       //这是一个消费类

            @Autowired
            private RestTemplate restTemplate;

            @GetMapping("/web")
            public String toClient(){
                /**
                 想要调用springcolud-service-provider的工程模块，
                 就要在配置文件中定义一个RestTemplate 这样的类，如下就是使用方式！

                 * 但此种方式就是手动的去指定一个访问地址，若要有多个或者中途模块更换，这样的效率是低的！
                 */

                //.getBody(); 返回一个字符串
               // return  restTemplate.getForEntity("http://localhost:8080/service", String.class).getBody();

                //当拥有了服务名称就不需要上面的return ， SPRINGCLOUD-SERVICE-PROVIDER  就是服务的名称， 这时就不需要知道iP 和端口号了！
                return  restTemplate.getForEntity("http://SPRINGCLOUD-SERVICE-PROVIDER/service", String.class).getBody();
            }
        }